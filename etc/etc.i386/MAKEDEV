#!/bin/sh -
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Written and contributed by W. Jolitz 12/90
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, standard number of units (or close)
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	wt*	QIC-interfaced (e.g. not SCSI) 3M cartridge tape
#	st*	"NEW type scsi tapes" (old driver uses the
#		block devices of the disks to get access)
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	fd*	"floppy" disk drives (3 1/2", 5 1/4")
#	sd*	"scsi disks"
#	cd*	"cdrom disks"
#
# Console ports:
#	pc*	devices for stock pccons
#	vty*	virtual console devices for syscons/pcvt/codrv
# 
# Pointing devices:
#	mse*	Logitech and ATI Inport bus mouse
#	psm*	PS/2 mouse
#
# Terminal ports:
#	com*	standard PC COM ports (really makes tty* entries for com)
#	sio*	fast interrupt PC COM ports (really makes tty* entries for sio)
#	tty*	alias for sio ports, this is what the system really wants
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#	vty*	virtual terminals using syscons/pcvt/codrv console
#
# Printers:
#	lpt*	stock lp
#	lpa*	interruptless lp
#
# Call units:
#
# Special purpose devices:
#	bpf*	packet filter
#	dcf*	dcf clock
#	speaker	pc speaker
#	tw*	xten power controller
#	snd*	various sound cards
#
#	$Id: MAKEDEV,v 1.13 1993/10/23 22:24:35 jkh Exp $
#

PATH=/sbin:/bin/:/usr/bin:/usr/sbin:
umask 77
for i
do
case $i in

all)
	sh MAKEDEV std						# standard
	sh MAKEDEV wd0 wd1 fd0 fd1 wt0 sd0 sd1 st0 cd0		# bdev
	sh MAKEDEV pty0 tty0 tty1 tty2 tty3 pc0 lpt0 lpt1 lpt2	# cdev
	sh MAKEDEV ch0 tw0 bpf0 dcf0 lpa0 lpa1 lpa2		# cdev
	sh MAKEDEV speaker mse0 sio0 sio1 sio2 sio3		# cdev
	# NOTE: co0 and vty04 are not done by a "sh MAKEDEV all"
	# these are for codrv and interfere with other devices! - rgrimes
	;;
std)
	rm -f console drum mem kmem null tty klog stdin stdout stderr
	mknod console	c 0 0;	chmod 600 console;	chown root.wheel console
	mknod drum	c 4 0;	chmod 640 drum;		chown root.kmem drum
	mknod kmem	c 2 1;	chmod 640 kmem;		chown root.kmem kmem
	mknod mem	c 2 0;	chmod 640 mem;		chown root.kmem mem
	mknod null	c 2 2;	chmod 666 null;		chown root.wheel null
	mknod zero	c 2 12;	chmod 666 zero;		chown root.wheel zero
	mknod io	c 2 14;	chmod 640 io;		chown root.kmem io
	mknod tty	c 1 0;	chmod 666 tty;		chown root.wheel tty
	mknod klog	c 7 0;	chmod 600 klog;		chown root.wheel klog
	mknod stdin	c 22 0; chmod 666 stdin;	chown root.wheel stdin
	mknod stdout	c 22 1; chmod 666 stdout;	chown root.wheel stdout
	mknod stderr	c 22 2; chmod 666 stderr;	chown root.wheel stderr
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	(cd fd && eval `echo "" | awk ' BEGIN { \
		for (i = 0; i < 64; i++) \
	 		printf("mknod %d c 22 %d;", i, i)}'`)
	chown -R bin.bin fd
	chmod 555 fd
	chmod 666 fd/*
	;;


# Create device files for new Archive/Wangtek QIC-02 tape driver (vak)
wt*)
	umask 2 ; u=`expr $i : '..\(.*\)'`
	if [ x$u = x ]; then u=0; fi
	rm -f rwt$u nrwt$u rwt${u}a nrwt${u}a rwt${u}b nrwt${u}b
	mknod rwt${u}   c 10 `expr  0 + $u`     # 150 megabytes
	mknod nrwt${u}  c 10 `expr  4 + $u`
	mknod rwt${u}a  c 10 `expr  8 + $u`     # 120 megabytes
	mknod nrwt${u}a c 10 `expr 12 + $u`
	mknod rwt${u}b  c 10 `expr 16 + $u`     # 60 megabytes
	mknod nrwt${u}b c 10 `expr 20 + $u`
	chown root.operator rwt$u nrwt$u rwt${u}a nrwt${u}a rwt${u}b nrwt${u}b
	umask 77;
	;;

fd*|sd*|wd*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	fd*) name=fd; blk=2; chr=9;;
	sd*) name=sd; blk=4; chr=13;;
	wd*) name=wd; blk=0; chr=3;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 8 + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 8 + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 8 + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 8 + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 8 + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 8 + 7`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 8 + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 8 + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 8 + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 8 + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 8 + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 8 + 7`
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

com*)
	unit=`expr $i : '...\(.*\)'`
	rm -f tty0$unit
	mknod tty0$unit c 8 $unit
	chown uucp.wheel tty0$unit
	;;

pty*)
	class=`expr $i : 'pty\(.*\)'`
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
	4) offset=64 name=t;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4)
		umask 0
		eval `echo $offset $name | awk ' { b=$1; n=$2 } END {
			for (i = 0; i < 16; i++)
				printf("rm -f tty%s%x; mknod tty%s%x c 5 %d; \
					rm -f pty%s%x; mknod pty%s%x c 6 %d; ", \
					n, i, n, i, b+i, n, i, n, i, b+i); }'`
		umask 77
		if [ $class = 1 ]; then
			mv ttyqf ttyv0; mv ptyqf ptyv0
		fi
		;;
	esac
	;;

st*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	st*) name=st;  chr=14;;
	esac
	rm -f r$name$unit nr$name$unit er$name$unit enr$name$unit 
	rm -f hr$name$unit hnr$name$unit her$name$unit henr$name$unit 
	rm -f mr$name$unit mnr$name$unit mer$name$unit menr$name$unit 
	rm -f lr$name$unit lnr$name$unit ler$name$unit lenr$name$unit 
	case $unit in
	0|1|2|3|4|5|6)
		mknod r${name}${unit}	c $chr `expr $unit '*' 16 + 0`
		mknod nr${name}${unit}	c $chr `expr $unit '*' 16 + 1`
		mknod er${name}${unit}	c $chr `expr $unit '*' 16 + 2`
		mknod hr${name}${unit}	c $chr `expr $unit '*' 16 + 4`
		mknod hnr${name}${unit}	c $chr `expr $unit '*' 16 + 5`
		mknod her${name}${unit}	c $chr `expr $unit '*' 16 + 6`
		mknod mr${name}${unit}	c $chr `expr $unit '*' 16 + 8`
		mknod mnr${name}${unit}	c $chr `expr $unit '*' 16 + 9`
		mknod mer${name}${unit}	c $chr `expr $unit '*' 16 + 10`
		mknod lr${name}${unit}	c $chr `expr $unit '*' 16 + 12`
		mknod lnr${name}${unit}	c $chr `expr $unit '*' 16 + 13`
		mknod ler${name}${unit}	c $chr `expr $unit '*' 16 + 14`
		chgrp operator r${name}${unit} nr${name}${unit} \
			er${name}${unit}  
		chgrp operator hr${name}${unit} hnr${name}${unit} \
			her${name}${unit}  
		chgrp operator mr${name}${unit} mnr${name}${unit} \
			mer${name}${unit}  
		chgrp operator lr${name}${unit} lnr${name}${unit} \
			ler${name}${unit}  
		chmod 640 r${name}${unit} nr${name}${unit} \
			er${name}${unit} 
		chmod 640 hr${name}${unit} hnr${name}${unit} \
			her${name}${unit} 
		chmod 640 mr${name}${unit} mnr${name}${unit} \
			mer${name}${unit} 
		chmod 640 lr${name}${unit} lnr${name}${unit} \
			ler${name}${unit} 
		;;
	*)
		echo bad unit for tape in: $i
		;;
	esac
	umask 77
	;;

ch*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	ch*) name=ch;  chr=17;;
	esac
	rm -f $name$unit
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}	c $chr `expr $unit '*' 16 + 0`
		chgrp operator ${name}${unit}
		chmod 640 ${name}${unit}
		;;
	*)
		echo bad unit for media changer in: $i
		;;
	esac
	umask 77
	;;

cd*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	cd*) name=cd; blk=6; chr=15;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + 0`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + 3`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + 0`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + 3`
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

lpt*)
	unit=`expr $i : 'lpt\(.*\)'`
	rm -f lpt$unit
	mknod lpt$unit c 16 $unit
	chown root.wheel lpt$unit
	;;

tw*)
	unit=`expr $i : 'tw\(.*\)'`
	rm -f tw$unit
	mknod tw$unit c 19 $unit
	chown root.wheel tw$unit
	;;

# hv 22-apr-93 use this to create the necessary video device for
# pccons driver
pc*)
	chr=12
	minor=0
 	name=vga
	rm -f ${name} kbd kbdco vgaco ttyv[0-9][0-9]
	mknod ${name} c ${chr} ${minor}
	chown root.wheel $name
	;;

# Use this to create virtual consoles for syscons, pcvt or codrv
# /dev/ttyv0-b
# use as MAKEDEV vtyNN to create NN entries
vty*)
	chr=12
	units=`expr $i : 'vty\(.*\)'`
	umask 0
	eval `echo ${chr} ${units} | awk ' { c=$1; n=$2 } END {
		for (i = 0; i < n; i++)
			printf("rm -f ttyv%01x; mknod ttyv%01x c %d %d;", \
				i, i, c, i); }'`
	umask 77
	;;

bpf*)
	unit=`expr $i : 'bpf\(.*\)'`
	rm -f bpf$unit
	mknod bpf$unit c 23 $unit
	chown root.wheel bpf$unit
	;;

dcf*)
	unit=`expr $i : 'dcf\(.*\)'`
	rm -f dcf$unit
	mknod dcf$unit c 24 $unit
	chown root.wheel dcf$unit
	;;

lpa*)
	unit=`expr $i : 'lpa\(.*\)'`
	chr=25
	rm -f lpa$unit lpa${unit}p
	mknod lpa${unit}	c $chr `expr $unit + 0`
	mknod lpa${unit}p	c $chr `expr $unit + 32`
	chown root.wheel lpa${unit} lpa${unit}p
	;;

speaker)
	rm -f speaker
	mknod speaker c 26 0
	chown root.wheel speaker
	;;

sio*|tty*)
	unit=`expr $i : '...\(.*\)'`
	rm -f tty0$unit
	mknod tty0$unit c 28 $unit
	chown uucp.wheel tty0$unit
	;;

mse*)
	unit=`expr $i : 'mse\(.*\)'`
	chr=27
	rm -f mse$unit
	mknod mse$unit c $chr `expr $unit '*' 2 + 1`	# non-blocking for X11
	chown root.wheel mse$unit
	;;

psm*)
	unit=`expr $i : 'psm\(.*\)'`
	chr=21
	rm -f psm$unit
	mknod psm$unit c $chr `expr $unit '*' 2 + 1`	# non-blocking for X11
	chown root.wheel psm$unit
	;;

mouse*)
	name=`expr $i : 'mouse-\(.*\)'`
	if [ ! -c $name ]; then
		$0 $name			# make the appropriate device
	fi
	rm -f mouse
	ln -s $name mouse
	;;


snd*)
	chr=30
	rm -f /dev/mixer	# Mixer	[ Control ]
	mknod /dev/mixer 	c $chr 0
	chmod 666 /dev/mixer

	rm -f /dev/sequencer	# Sequencer [ FM Synth and MIDI output ]
	mknod /dev/sequencer	c $chr 1
	chmod 666 /dev/sequencer

	rm -f /dev/midi		# Midi input [ Not implemented ]
	mknod /dev/midi		c $chr 2

	rm -f /dev/dsp		# DSP [ Digitized voice ]
	mknod /dev/dsp		c $chr 3
	chmod 666 /dev/dsp

	rm -f /dev/audio	# SPARC audio [ Not fully implemented ]
	mknod /dev/audio	c $chr 4
	chmod 666 /dev/audio

	rm -f /dev/dsp16	# DSP16 [ Same as /dev/dsp, except 16 bits ]
	mknod /dev/dsp16	c $chr 5
	chmod 666 /dev/dsp16

	rm -f /dev/sndstat	# Status Device [ Debugging interface ]
	mknod /dev/sndstat	c $chr 6
	chmod 666 /dev/sndstat

	rm -f /dev/pro_midi	# PRO_MIDI [PAS midi input and output]
	mknod /dev/pro_midi	c $chr 15
	chmod 666 /dev/pro_midi

	rm -f /dev/dsp1		# DSP 1 [ SB emulation of PAS16 or 2nd audio ]
	mknod /dev/dsp1		c $chr 19
	chmod 666 /dev/dsp1

	rm -f /dev/audio1	# Sparc Audio 1 [ SB emulation of PAS16 or 2nd audio ]
	mknod /dev/audio1	c $chr 20
	chmod 666 /dev/audio1
	;;

local)
	umask 0
	sh MAKEDEV.local
	;;

esac
done
